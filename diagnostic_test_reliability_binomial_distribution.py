# -*- coding: utf-8 -*-
"""Diagnostic test reliability - binomial distribution

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/121_gf0ONGiw8u1041YPkmO71wqT5y5sz
"""

!pip install streamlit

"""Theoritical proving of the problem"""

import scipy.stats as stats

# Parameters
n = 30  # number of patients
p = 0.9  # probability of accurate diagnosis

# Calculate probability for X = 28, 29, 30
prob_28 = stats.binom.pmf(28, n, p)
prob_29 = stats.binom.pmf(29, n, p)
prob_30 = stats.binom.pmf(30, n, p)

# Total probability for X >= 28
prob_ge_28 = prob_28 + prob_29 + prob_30
prob_ge_28

"""Preview of the dataset that is going to be generated, can tweak parameters according to liking"""

import pandas as pd
import numpy as np

# Set random seed for reproducibility
np.random.seed(42)

# Number of rows in the dataset
num_rows = 10000

# Generate Patient_IDs
patient_ids = np.arange(1, num_rows + 1)

# Generate Test_Type
test_types = np.random.choice(['PCR', 'Antigen', 'ELISA'], size=num_rows, p=[0.5, 0.3, 0.2])

# Generate Gender
genders = np.random.choice(['M', 'F'], size=num_rows)

# Generate Age (between 18 and 85)
ages = np.random.randint(18, 86, size=num_rows)

# Generate Test_Outcome
test_outcomes = np.random.choice(['Positive', 'Negative'], size=num_rows, p=[0.85, 0.15])

# Generate Actual_Status based on Test_Outcome
actual_status = []
for outcome in test_outcomes:
    if outcome == 'Positive':
        status = np.random.choice(['True Positive', 'False Positive'], p=[0.8, 0.2])
    else:
        status = np.random.choice(['True Negative', 'False Negative'], p=[0.9, 0.1])
    actual_status.append(status)

# Create the DataFrame
df = pd.DataFrame({
    'Patient_ID': patient_ids,
    'Test_Outcome': test_outcomes,
    'Actual_Status': actual_status,
    'Test_Type': test_types,
    'Age': ages,
    'Gender': genders
})

# Display the first few rows
df.head()

"""Generates the dataset"""

import pandas as pd
import numpy as np

# Set random seed for reproducibility
np.random.seed(42)

# Number of rows in the dataset
num_rows = 10000

# Generate Patient_IDs
patient_ids = np.arange(1, num_rows + 1)

# Generate Test_Type
test_types = np.random.choice(['PCR', 'Antigen', 'ELISA'], size=num_rows, p=[0.5, 0.3, 0.2])

# Generate Gender
genders = np.random.choice(['M', 'F'], size=num_rows)

# Generate Age (between 18 and 85)
ages = np.random.randint(18, 86, size=num_rows)

# Generate Test_Outcome
test_outcomes = np.random.choice(['Positive', 'Negative'], size=num_rows, p=[0.85, 0.15])

# Generate Actual_Status based on Test_Outcome
actual_status = []
for outcome in test_outcomes:
    if outcome == 'Positive':
        status = np.random.choice(['True Positive', 'False Positive'], p=[0.8, 0.2])
    else:
        status = np.random.choice(['True Negative', 'False Negative'], p=[0.9, 0.1])
    actual_status.append(status)

# Create the DataFrame
df = pd.DataFrame({
    'Patient_ID': patient_ids,
    'Test_Outcome': test_outcomes,
    'Actual_Status': actual_status,
    'Test_Type': test_types,
    'Age': ages,
    'Gender': genders
})

# Export to CSV (Optional)
df.to_csv('diagnostic_test_data.csv', index=False)
print("Dataset generated and saved as 'diagnostic_test_data.csv'")

"""Downloads the dataset"""

from google.colab import files

# Download the generated dataset
files.download('diagnostic_test_data.csv')

import pandas as pd
import scipy.stats as stats

# Load Dataset
df = pd.read_csv('diagnostic_test_data.csv')

# Calculate Probability of Success
p = (df['Actual_Status'].isin(['True Positive', 'True Negative']).sum()) / len(df)

# Binomial Prediction
n = 30  # Number of patients for new prediction
k = 28  # Desired number of accurate predictions
prob = stats.binom.pmf(k, n, p)

print(f"Probability of exactly {k} accurate diagnoses out of {n} is {prob}")

"""Uses streamlit"""

import streamlit as st

st.title("Diagnostic Test Success Probability Predictor")

n = st.number_input("Number of Patients", min_value=1, value=30)
p = st.slider("Probability of Test Accuracy", 0.0, 1.0, 0.9)
k = st.number_input("Desired Accurate Diagnoses", min_value=0, value=28)

prob = stats.binom.pmf(k, n, p)
st.write(f"Probability of exactly {k} accurate diagnoses out of {n} is {prob:.4f}")